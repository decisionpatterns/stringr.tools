% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/str_prefix.R, R/str_unprefix.R
\name{str_prefix}
\alias{str_prefix}
\alias{str_postfix}
\alias{str_suffix}
\alias{str_prefix_idem}
\alias{str_postfix_idem}
\alias{str_suffix_idem}
\alias{str_unprefix}
\alias{str_unpostfix}
\alias{str_unsuffix}
\title{Add prefix or suffix to a string}
\usage{
str_prefix(x, prefix, ...)

str_postfix(x, postfix, ...)

str_suffix(x, postfix, ...)

str_prefix_idem(x, prefix, ...)

str_postfix_idem(x, postfix, ...)

str_suffix_idem(x, postfix, ...)

str_unprefix(string, prefix, ...)

str_unpostfix(string, postfix, ...)

str_unsuffix(string, postfix, ...)
}
\arguments{
\item{x}{character vector or object with a names attribute}

\item{prefix, postfix}{string for pre- or postfix}

\item{...}{additional arguments passed to subsequent functions}
}
\value{
character vector with each element of \code{x} prefixed or sufffixed as
specified.
}
\description{
Adds a prefix or suffix to strings
}
\details{
This is a convenient wrapper for \code{paste0( x, prefix, ...)} and
\code{paste( x, suffix, ...)}.

\code{str_postfix} is an alias for \code{str_postfix}.

\code{\link[=str_prefix_idem]{str_prefix_idem()}} and \code{\link[=str_postfix_idem]{str_postfix_idem()}} are idempotent forms of
\code{\link[=str_prefix]{str_prefix()}} and \code{\link[=str_postfix]{str_postfix()}}. Pre- and postfixes are not added to
elements that are already pre- or postfixed.

\code{str_unprefix} and \code{str_unpostfix}/\code{str_unsuffix} removes pre- and
postfixes. With these, the \code{prefix} and \code{postfix} are taken as regular
expression, so that one function call can remove a variety of pre- and
postfixes.

\code{str_unpostfix} and \code{str_unsuffix} removes \code{postfix} (if it exists) from
the string.
}
\examples{
  lets <- letters[1:5]
  str_prefix( lets, "pre." )
  str_posfix( lets, ".post" )

 x <- c( "foo", "pre.foo", "bar", "pre.bar", "one.two.three" )
 str_prefix_idem(x, "pre.")

 x <- c( "foo", "foo.post", "bar", "bar.post", "one.two.three" )
 str_postfix_idem(x, ".post")

 # Idempotency
 str_postfix_idem( str_postfix_idem(x, ".post"), ".post" )

  lets <- letters[1:5]
  prefixed <- str_prefix( lets, "pre." )
  str_unprefix( prefixed, "pre." )

  lets <- letters[1:5]
  postfixed <- str_postfix( lets, "pre." )
  str_unpostfix( postfixed, "pre." )

}
\seealso{
\itemize{
\item \code{\link[stringr:str_replace]{stringr::str_replace()}}
}
}
