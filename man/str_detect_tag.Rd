% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/str_detect_tags.R
\name{str_detect_tag}
\alias{str_detect_tag}
\title{str_detect_tag}
\usage{
str_detect_tag(string, tags, sep = ",", ignore.case = TRUE)
}
\arguments{
\item{string}{character vector with each element containing zero or  more
tags separated by \code{sep}}

\item{tags}{character; vector of one or more tags, can be PCRE}

\item{sep}{character; single element (usually single character) separator
between tags in \code{string} ( Default: ',' )}

\item{ignore.case}{logical whether to ignore case during matching
  ( Default: TRUE)

Tags are matched using \code{str_detect} using Perl regular expressions.
Leading and trailing whitespace are ignored.}
}
\value{
logical of the same length of \code{score} indicating whether the
  element of score contains ANY of the tags.
}
\description{
Similar to stringr's \code{str_detect} except matches are determined by the
tag matching, i.e. substring matches. In this instance tags are taken to
mean unary bits of information (flags) delineated by a separator. It is often
convenient to place these tag in a single text field -- thus this function to
see if they match.
}
\note{
allow for leading/trailing white space
}
\examples{
  string <- c( 'X', 'Y', 'Z', 'Y,Z' )
  tags <- list( 'X', '(y)' )

  str_detect_tag( string, tags )   # T, T, F
  str_detect_tag( string, tags, ignore.case=FALSE )  # T, F, F

}
\seealso{
\code{\link[stringr]{str_detect}}
}
